{
  "version": 3,
  "sources": ["../src/colors.ts", "../src/index.ts"],
  "sourcesContent": ["// Forked from deno_std's lib/internal/cli_table.js\r\n// Copyright 2018-2022 the Deno authors. MIT license.\r\n// Copyright 2022 idanran. MIT license.\r\n\r\ninterface Code {\r\n    open: string;\r\n    close: string;\r\n    regexp: RegExp;\r\n}\r\n\r\n/** RGB 8-bits per channel. Each in range `0->255` or `0x00->0xff` */\r\ninterface Rgb {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n}\r\n\r\n/**\r\n * Builds color code\r\n * @param open\r\n * @param close\r\n */\r\nfunction code(open: number[], close: number): Code {\r\n    return {\r\n        open: `\\x1b[${open.join(\";\")}m`,\r\n        close: `\\x1b[${close}m`,\r\n        regexp: new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\r\n    };\r\n}\r\n\r\n/**\r\n * Applies color and background based on color code and its associated text\r\n * @param str text to apply color settings to\r\n * @param code color code to apply\r\n */\r\nfunction run(str: string, code: Code): string {\r\n    return `${code.open}${str.replace(code.regexp, code.open)}${code.close}`\r\n}\r\n\r\n/**\r\n * Reset the text modified\r\n * @param str text to reset\r\n */\r\nexport function reset(str: string): string {\r\n    return run(str, code([0], 0));\r\n}\r\n\r\n/**\r\n * Make the text bold.\r\n * @param str text to make bold\r\n */\r\nexport function bold(str: string): string {\r\n    return run(str, code([1], 22));\r\n}\r\n\r\n/**\r\n * The text emits only a small amount of light.\r\n * @param str text to dim\r\n */\r\nexport function dim(str: string): string {\r\n    return run(str, code([2], 22));\r\n}\r\n\r\n/**\r\n * Make the text italic.\r\n * @param str text to make italic\r\n */\r\nexport function italic(str: string): string {\r\n    return run(str, code([3], 23));\r\n}\r\n\r\n/**\r\n * Make the text underline.\r\n * @param str text to underline\r\n */\r\nexport function underline(str: string): string {\r\n    return run(str, code([4], 24));\r\n}\r\n\r\n/**\r\n * Invert background color and text color.\r\n * @param str text to invert its color\r\n */\r\nexport function inverse(str: string): string {\r\n    return run(str, code([7], 27));\r\n}\r\n\r\n/**\r\n * Make the text hidden.\r\n * @param str text to hide\r\n */\r\nexport function hidden(str: string): string {\r\n    return run(str, code([8], 28));\r\n}\r\n\r\n/**\r\n * Put horizontal line through the center of the text.\r\n * @param str text to strike through\r\n */\r\nexport function strikethrough(str: string): string {\r\n    return run(str, code([9], 29));\r\n}\r\n\r\n/**\r\n * Set text color to black.\r\n * @param str text to make black\r\n */\r\nexport function black(str: string): string {\r\n    return run(str, code([30], 39));\r\n}\r\n\r\n/**\r\n * Set text color to red.\r\n * @param str text to make red\r\n */\r\nexport function red(str: string): string {\r\n    return run(str, code([31], 39));\r\n}\r\n\r\n/**\r\n * Set text color to green.\r\n * @param str text to make green\r\n */\r\nexport function green(str: string): string {\r\n    return run(str, code([32], 39));\r\n}\r\n\r\n/**\r\n * Set text color to yellow.\r\n * @param str text to make yellow\r\n */\r\nexport function yellow(str: string): string {\r\n    return run(str, code([33], 39));\r\n}\r\n\r\n/**\r\n * Set text color to blue.\r\n * @param str text to make blue\r\n */\r\nexport function blue(str: string): string {\r\n    return run(str, code([34], 39));\r\n}\r\n\r\n/**\r\n * Set text color to magenta.\r\n * @param str text to make magenta\r\n */\r\nexport function magenta(str: string): string {\r\n    return run(str, code([35], 39));\r\n}\r\n\r\n/**\r\n * Set text color to cyan.\r\n * @param str text to make cyan\r\n */\r\nexport function cyan(str: string): string {\r\n    return run(str, code([36], 39));\r\n}\r\n\r\n/**\r\n * Set text color to white.\r\n * @param str text to make white\r\n */\r\nexport function white(str: string): string {\r\n    return run(str, code([37], 39));\r\n}\r\n\r\n/**\r\n * Set text color to gray.\r\n * @param str text to make gray\r\n */\r\nexport function gray(str: string): string {\r\n    return brightBlack(str);\r\n}\r\n\r\n/**\r\n * Set text color to bright black.\r\n * @param str text to make bright-black\r\n */\r\nexport function brightBlack(str: string): string {\r\n    return run(str, code([90], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright red.\r\n * @param str text to make bright-red\r\n */\r\nexport function brightRed(str: string): string {\r\n    return run(str, code([91], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright green.\r\n * @param str text to make bright-green\r\n */\r\nexport function brightGreen(str: string): string {\r\n    return run(str, code([92], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright yellow.\r\n * @param str text to make bright-yellow\r\n */\r\nexport function brightYellow(str: string): string {\r\n    return run(str, code([93], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright blue.\r\n * @param str text to make bright-blue\r\n */\r\nexport function brightBlue(str: string): string {\r\n    return run(str, code([94], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright magenta.\r\n * @param str text to make bright-magenta\r\n */\r\nexport function brightMagenta(str: string): string {\r\n    return run(str, code([95], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright cyan.\r\n * @param str text to make bright-cyan\r\n */\r\nexport function brightCyan(str: string): string {\r\n    return run(str, code([96], 39));\r\n}\r\n\r\n/**\r\n * Set text color to bright white.\r\n * @param str text to make bright-white\r\n */\r\nexport function brightWhite(str: string): string {\r\n    return run(str, code([97], 39));\r\n}\r\n\r\n/**\r\n * Set background color to black.\r\n * @param str text to make its background black\r\n */\r\nexport function bgBlack(str: string): string {\r\n    return run(str, code([40], 49));\r\n}\r\n\r\n/**\r\n * Set background color to red.\r\n * @param str text to make its background red\r\n */\r\nexport function bgRed(str: string): string {\r\n    return run(str, code([41], 49));\r\n}\r\n\r\n/**\r\n * Set background color to green.\r\n * @param str text to make its background green\r\n */\r\nexport function bgGreen(str: string): string {\r\n    return run(str, code([42], 49));\r\n}\r\n\r\n/**\r\n * Set background color to yellow.\r\n * @param str text to make its background yellow\r\n */\r\nexport function bgYellow(str: string): string {\r\n    return run(str, code([43], 49));\r\n}\r\n\r\n/**\r\n * Set background color to blue.\r\n * @param str text to make its background blue\r\n */\r\nexport function bgBlue(str: string): string {\r\n    return run(str, code([44], 49));\r\n}\r\n\r\n/**\r\n *  Set background color to magenta.\r\n * @param str text to make its background magenta\r\n */\r\nexport function bgMagenta(str: string): string {\r\n    return run(str, code([45], 49));\r\n}\r\n\r\n/**\r\n * Set background color to cyan.\r\n * @param str text to make its background cyan\r\n */\r\nexport function bgCyan(str: string): string {\r\n    return run(str, code([46], 49));\r\n}\r\n\r\n/**\r\n * Set background color to white.\r\n * @param str text to make its background white\r\n */\r\nexport function bgWhite(str: string): string {\r\n    return run(str, code([47], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright black.\r\n * @param str text to make its background bright-black\r\n */\r\nexport function bgBrightBlack(str: string): string {\r\n    return run(str, code([100], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright red.\r\n * @param str text to make its background bright-red\r\n */\r\nexport function bgBrightRed(str: string): string {\r\n    return run(str, code([101], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright green.\r\n * @param str text to make its background bright-green\r\n */\r\nexport function bgBrightGreen(str: string): string {\r\n    return run(str, code([102], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright yellow.\r\n * @param str text to make its background bright-yellow\r\n */\r\nexport function bgBrightYellow(str: string): string {\r\n    return run(str, code([103], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright blue.\r\n * @param str text to make its background bright-blue\r\n */\r\nexport function bgBrightBlue(str: string): string {\r\n    return run(str, code([104], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright magenta.\r\n * @param str text to make its background bright-magenta\r\n */\r\nexport function bgBrightMagenta(str: string): string {\r\n    return run(str, code([105], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright cyan.\r\n * @param str text to make its background bright-cyan\r\n */\r\nexport function bgBrightCyan(str: string): string {\r\n    return run(str, code([106], 49));\r\n}\r\n\r\n/**\r\n * Set background color to bright white.\r\n * @param str text to make its background bright-white\r\n */\r\nexport function bgBrightWhite(str: string): string {\r\n    return run(str, code([107], 49));\r\n}\r\n\r\n/* Special Color Sequences */\r\n\r\n/**\r\n * Clam and truncate color codes\r\n * @param n\r\n * @param max number to truncate to\r\n * @param min number to truncate from\r\n */\r\nfunction clampAndTruncate(n: number, max = 255, min = 0): number {\r\n    return Math.trunc(Math.max(Math.min(n, max), min));\r\n}\r\n\r\n/**\r\n * Set text color using paletted 8bit colors.\r\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\r\n * @param str text color to apply paletted 8bit colors to\r\n * @param color code\r\n */\r\nexport function rgb8(str: string, color: number): string {\r\n    return run(str, code([38, 5, clampAndTruncate(color)], 39));\r\n}\r\n\r\n/**\r\n * Set background color using paletted 8bit colors.\r\n * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\r\n * @param str text color to apply paletted 8bit background colors to\r\n * @param color code\r\n */\r\nexport function bgRgb8(str: string, color: number): string {\r\n    return run(str, code([48, 5, clampAndTruncate(color)], 49));\r\n}\r\n\r\n/**\r\n * Set text color using 24bit rgb.\r\n * `color` can be a number in range `0x000000` to `0xffffff` or\r\n * an `Rgb`.\r\n *\r\n * To produce the color magenta:\r\n *\r\n * ```ts\r\n *      import { rgb24 } from \"https://deno.land/std@$STD_VERSION/fmt/colors.ts\";\r\n *      rgb24(\"foo\", 0xff00ff);\r\n *      rgb24(\"foo\", {r: 255, g: 0, b: 255});\r\n * ```\r\n * @param str text color to apply 24bit rgb to\r\n * @param color code\r\n */\r\nexport function rgb24(str: string, color: number | Rgb): string {\r\n    if (typeof color === \"number\") {\r\n        return run(\r\n            str,\r\n            code(\r\n                [38, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\r\n                39,\r\n            ),\r\n        );\r\n    }\r\n    return run(\r\n        str,\r\n        code(\r\n            [\r\n                38,\r\n                2,\r\n                clampAndTruncate(color.r),\r\n                clampAndTruncate(color.g),\r\n                clampAndTruncate(color.b),\r\n            ],\r\n            39,\r\n        ),\r\n    );\r\n}\r\n\r\n/**\r\n * Set background color using 24bit rgb.\r\n * `color` can be a number in range `0x000000` to `0xffffff` or\r\n * an `Rgb`.\r\n *\r\n * To produce the color magenta:\r\n *\r\n * ```ts\r\n *      import { bgRgb24 } from \"https://deno.land/std@$STD_VERSION/fmt/colors.ts\";\r\n *      bgRgb24(\"foo\", 0xff00ff);\r\n *      bgRgb24(\"foo\", {r: 255, g: 0, b: 255});\r\n * ```\r\n * @param str text color to apply 24bit rgb to\r\n * @param color code\r\n */\r\nexport function bgRgb24(str: string, color: number | Rgb): string {\r\n    if (typeof color === \"number\") {\r\n        return run(\r\n            str,\r\n            code(\r\n                [48, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff],\r\n                49,\r\n            ),\r\n        );\r\n    }\r\n    return run(\r\n        str,\r\n        code(\r\n            [\r\n                48,\r\n                2,\r\n                clampAndTruncate(color.r),\r\n                clampAndTruncate(color.g),\r\n                clampAndTruncate(color.b),\r\n            ],\r\n            49,\r\n        ),\r\n    );\r\n}\r\n\r\n// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js\r\nconst ANSI_PATTERN = new RegExp(\r\n    [\r\n        \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\r\n        \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\r\n    ].join(\"|\"),\r\n    \"g\",\r\n);\r\n\r\n/**\r\n * Remove ANSI escape codes from the string.\r\n * @param string to remove ANSI escape codes from\r\n */\r\nexport function stripColor(string: string): string {\r\n    return string.replace(ANSI_PATTERN, \"\");\r\n}", "// Forked from deno's ext/console/02_console.js\n// Copyright 2018-2022 the Deno authors. MIT license.\n// Copyright 2022 idanran. MIT license.\n\nimport * as colors from './colors'\n\ninterface InspectOptions {\n    /** Stylize output with ANSI colors. Defaults to `false`. */\n    colors?: boolean\n    /** Try to fit more than one entry of a collection on the same line.\n     * Defaults to `true`. */\n    compact?: boolean\n    /** Traversal depth for nested objects. Defaults to `4`. */\n    depth?: number\n    /** The maximum number of iterable entries to print. Defaults to `100`. */\n    iterableLimit?: number\n    /** Sort Object, Set and Map entries by key. Defaults to `false`. */\n    sorted?: boolean\n    /** Add a trailing comma for multiline collections. Defaults to `false`. */\n    trailingComma?: boolean\n    /*** Evaluate the result of calling getters. Defaults to `false`. */\n    getters?: boolean\n    /** Show an object's non-enumerable properties. Defaults to `false`. */\n    showHidden?: boolean\n    /** The maximum length of a string before it is truncated with an\n     * ellipsis. */\n    strAbbreviateSize?: number\n}\n\n/** Converts the input into a string that has the same format as printed by `console.log()`. */\nexport function inspect(\n    value: unknown,\n    options: InspectOptions = {},\n) {\n    circular = undefined\n    return inspectValue(value, {\n        ...DEFAULT_INSPECT_OPTIONS,\n        ...options,\n    })\n}\n\nlet circular: Map<unknown, number> | undefined\nfunction handleCircular(value: unknown, cyan: (s: string) => string) {\n    let index = 1\n    if (circular === undefined) {\n        circular = new Map()\n        circular.set(value, index)\n    } else {\n        index = circular.get(value)!\n        if (index === undefined) {\n            index = circular.size + 1;\n            circular.set(value, index)\n        }\n    }\n    // Circular string is cyan\n    return cyan(`[Circular *${index}]`)\n}\n\nconst DEFAULT_INSPECT_OPTIONS = {\n    depth: 4,\n    indentLevel: 0,\n    sorted: false,\n    trailingComma: false,\n    compact: true,\n    iterableLimit: 100,\n    colors: false,\n    getters: false,\n    showHidden: false,\n    strAbbreviateSize: 100,\n}\n\nconst DEFAULT_INDENT = \"  \" // Default indent string\n\nconst LINE_BREAKING_LENGTH = 80\nconst MIN_GROUP_LENGTH = 6\n\nconst STR_ABBREVIATE_SIZE = 100\n\nconst CTX_STACK: unknown[] = []\nfunction ctxHas(x: Record<any, any>) {\n    // Only check parent contexts\n    return CTX_STACK.slice(0, CTX_STACK.length - 1).includes(x)\n}\n\nfunction inspectValue(\n    value: unknown,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    CTX_STACK.push(value)\n    let x\n    try {\n        x = _inspectValue(value, inspectOptions)\n    } finally {\n        CTX_STACK.pop()\n    }\n    return x\n}\n\nfunction maybeColor(fn: (s: string) => string, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    return inspectOptions.colors ? fn : (s: string) => s\n}\n\n// We can match Node's quoting behavior exactly by swapping the double quote and\n// single quote in this array. That would give preference to single quotes.\n// However, we prefer double quotes as the default.\nconst QUOTES = ['\"', \"'\", \"`\"]\n\n// Replace escape sequences that can modify output.\nfunction replaceEscapeSequences(string: string) {\n    const escapeMap = {\n        \"\\b\": \"\\\\b\",\n        \"\\f\": \"\\\\f\",\n        \"\\n\": \"\\\\n\",\n        \"\\r\": \"\\\\r\",\n        \"\\t\": \"\\\\t\",\n        \"\\v\": \"\\\\v\",\n    }\n\n    return string.replace(/([\\b\\f\\n\\r\\t\\v])/g,\n        (c) => escapeMap[c as keyof typeof escapeMap]).replace(/[\\x00-\\x1f\\x7f-\\x9f]/g,\n            (c) =>\n                \"\\\\x\" + c.charCodeAt(0).toString(16).padStart(2,\n                    \"0\"))\n}\n\n/** Surround the string in quotes.\n *\n * The quote symbol is chosen by taking the first of the `QUOTES` array which\n * does not occur in the string. If they all occur, settle with `QUOTES[0]`.\n *\n * Insert a backslash before any occurrence of the chosen quote symbol and\n * before any backslash.\n */\nfunction quoteString(string: string) {\n    const quote = QUOTES.find((c) => !string.includes(c)) ?? QUOTES[0]\n    const escapePattern = new RegExp(`(?=[${quote}\\\\\\\\])`, \"g\")\n    string = string.replace(escapePattern, \"\\\\\")\n    string = replaceEscapeSequences(string)\n    return `${quote}${string}${quote}`\n}\n\n// Print strings when they are inside of arrays or objects with quotes\nfunction inspectValueWithQuotes(\n    value: unknown,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const abbreviateSize =\n        typeof inspectOptions.strAbbreviateSize === \"undefined\"\n            ? STR_ABBREVIATE_SIZE\n            : inspectOptions.strAbbreviateSize;\n    const green = maybeColor(colors.green, inspectOptions);\n    switch (typeof value) {\n        case \"string\": {\n            const trunc = value.length > abbreviateSize\n                ? value.slice(0, abbreviateSize) + \"...\"\n                : value;\n            return green(quoteString(trunc)); // Quoted strings are green\n        }\n        default:\n            return inspectValue(value, inspectOptions);\n    }\n}\n\ntype TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array\n\n// Copyright Joyent, Inc. and other Node contributors. MIT license.\n// Forked from Node's lib/internal/cli_table.js\nfunction isTypedArray(x: unknown): x is TypedArray {\n    return ArrayBuffer.isView(x) &&\n        !DataView.prototype.isPrototypeOf(x)\n}\n\nfunction isInvalidDate(x: Date) {\n    return isNaN(x.getTime())\n}\n\n// Ported from Node.js\n// Copyright Node.js contributors. All rights reserved.\nfunction groupEntries(\n    entries: any[],\n    level: number,\n    value?: Array<unknown>,\n    iterableLimit = 100,\n) {\n    let totalLength = 0\n    let maxLength = 0\n    let entriesLength = entries.length\n    if (iterableLimit < entriesLength) {\n        // This makes sure the \"... n more items\" part is not taken into account.\n        entriesLength--\n    }\n    const separatorSpace = 2 // Add 1 for the space and 1 for the separator.\n    const dataLen = new Array(entriesLength)\n    // Calculate the total length of all output entries and the individual max\n    // entries length of all output entries.\n    // IN PROGRESS: Colors are being taken into account.\n    for (let i = 0; i < entriesLength; i++) {\n        // Taking colors into account: removing the ANSI color\n        // codes from the string before measuring its length\n        const len = colors.stripColor(entries[i]).length\n        dataLen[i] = len\n        totalLength += len + separatorSpace\n        if (maxLength < len) maxLength = len\n    }\n    // Add two to `maxLength` as we add a single whitespace character plus a comma\n    // in-between two entries.\n    const actualMax = maxLength + separatorSpace\n    // Check if at least three entries fit next to each other and prevent grouping\n    // of arrays that contains entries of very different length (i.e., if a single\n    // entry is longer than 1/5 of all other entries combined). Otherwise the\n    // space in-between small entries would be enormous.\n    if (\n        actualMax * 3 + (level + 1) < LINE_BREAKING_LENGTH &&\n        (totalLength / actualMax > 5 || maxLength <= 6)\n    ) {\n        const approxCharHeights = 2.5\n        const averageBias = Math.sqrt(actualMax - totalLength / entries.length)\n        const biasedMax = Math.max(actualMax - 3 - averageBias, 1)\n        // Dynamically check how many columns seem possible.\n        const columns = Math.min(\n            // Ideally a square should be drawn. We expect a character to be about 2.5\n            // times as high as wide. This is the area formula to calculate a square\n            // which contains n rectangles of size `actualMax * approxCharHeights`.\n            // Divide that by `actualMax` to receive the correct number of columns.\n            // The added bias increases the columns for short entries.\n            Math.round(\n                Math.sqrt(approxCharHeights * biasedMax * entriesLength) / biasedMax,\n            ),\n            // Do not exceed the breakLength.\n            Math.floor((LINE_BREAKING_LENGTH - (level + 1)) / actualMax),\n            // Limit the columns to a maximum of fifteen.\n            15,\n        )\n        // Return with the original output if no grouping should happen.\n        if (columns <= 1) {\n            return entries;\n        }\n        const tmp: string[] = []\n        const maxLineLength = []\n        for (let i = 0; i < columns; i++) {\n            let lineMaxLength = 0\n            for (let j = i; j < entries.length; j += columns) {\n                if (dataLen[j] > lineMaxLength) lineMaxLength = dataLen[j]\n            }\n            lineMaxLength += separatorSpace\n            maxLineLength[i] = lineMaxLength\n        }\n        let order: keyof typeof String.prototype = \"padStart\"\n        if (value !== undefined) {\n            for (let i = 0; i < entries.length; i++) {\n                if (\n                    typeof (value[i]) !== \"number\" &&\n                    typeof value[i] !== \"bigint\"\n                ) {\n                    order = \"padEnd\"\n                    break\n                }\n            }\n        }\n        // Each iteration creates a single line of grouped entries.\n        for (let i = 0; i < entriesLength; i += columns) {\n            // The last lines may contain less entries than columns.\n            const max = Math.min(i + columns, entriesLength)\n            let str = \"\"\n            let j = i\n            for (; j < max - 1; j++) {\n                const lengthOfColorCodes = entries[j].length - dataLen[j]\n                const padding = maxLineLength[j - i] + lengthOfColorCodes\n                str += `${entries[j]}, `[order](padding, \" \")\n            }\n            if (order === \"padStart\") {\n                const lengthOfColorCodes = entries[j].length - dataLen[j]\n                const padding = maxLineLength[j - i] +\n                    lengthOfColorCodes -\n                    separatorSpace;\n                str += entries[j].padStart(padding, \" \")\n            } else {\n                str += entries[j]\n            }\n            tmp.push(str)\n        }\n        if (iterableLimit < entries.length) {\n            tmp.push(entries[entriesLength])\n        }\n        entries = tmp\n    }\n    return entries\n}\n\ninterface entryHandlerResp {\n    entry: string\n    skipTo?: number\n}\n\ninterface inspectIterableOptions {\n    typeName: string\n    displayName: string\n    delims: string[]\n    entryHandler: (entry: [any, unknown], inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) => entryHandlerResp | string\n    group: boolean\n    sort: boolean\n}\n\nfunction inspectIterable(\n    value: unknown,\n    options: inspectIterableOptions,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    if (inspectOptions.indentLevel >= inspectOptions.depth) {\n        return cyan(`[${options.typeName}]`)\n    }\n\n    const entries: unknown[] = []\n    let iter: IterableIterator<[any, any]> | undefined\n    let valueIsTypedArray = false\n    let entriesLength\n\n    switch (options.typeName) {\n        case \"Map\":\n            iter = (value as Map<any, any>).entries()\n            entriesLength = (value as Map<any, any>).size\n            break\n        case \"Set\":\n            iter = (value as Set<any>).entries()\n            entriesLength = (value as Set<any>).size\n            break\n        case \"Array\":\n            entriesLength = (value as Array<any>).length\n            break\n        default:\n            if (isTypedArray(value)) {\n                entriesLength = value.length\n                iter = value.entries()\n                valueIsTypedArray = true;\n            } else {\n                throw new TypeError(\"unreachable\")\n            }\n    }\n\n    let entriesLengthWithoutEmptyItems = entriesLength\n    if (options.typeName === \"Array\") {\n        for (\n            let i = 0, j = 0;\n            i < entriesLength && j < inspectOptions.iterableLimit;\n            i++, j++\n        ) {\n            inspectOptions.indentLevel++\n            const { entry, skipTo } = (options.entryHandler(\n                [i, (value as Array<unknown>)[i]],\n                inspectOptions,\n            ) as entryHandlerResp)\n            entries.push(entry)\n            inspectOptions.indentLevel--\n\n            if (skipTo) {\n                // subtract skipped (empty) items\n                entriesLengthWithoutEmptyItems -= skipTo - i\n                i = skipTo\n            }\n        }\n    } else {\n        let i = 0\n        while (true) {\n            let el\n            try {\n                const res = iter!.next()\n                if (res.done) {\n                    break\n                }\n                el = res.value\n            } catch (err) {\n                if (valueIsTypedArray) {\n                    // TypedArray.prototype.entries doesn't throw, unless the ArrayBuffer\n                    // is detached. We don't want to show the exception in that case, so\n                    // we catch it here and pretend the ArrayBuffer has no entries (like\n                    // Chrome DevTools does).\n                    break\n                }\n                throw err\n            }\n            if (i < inspectOptions.iterableLimit) {\n                inspectOptions.indentLevel++\n                entries.push(options.entryHandler(\n                    el,\n                    inspectOptions,\n                ))\n                inspectOptions.indentLevel--\n            } else {\n                break\n            }\n            i++\n        }\n    }\n\n    if (options.sort) {\n        entries.sort()\n    }\n\n    if (entriesLengthWithoutEmptyItems > inspectOptions.iterableLimit) {\n        const nmore = entriesLengthWithoutEmptyItems -\n            inspectOptions.iterableLimit\n        entries.push(`... ${nmore} more items`)\n    }\n\n    const iPrefix = `${options.displayName ? options.displayName + \" \" : \"\"}`\n\n    const level = inspectOptions.indentLevel;\n    const initIndentation = `\\n${DEFAULT_INDENT.repeat(level + 1)}`\n    const entryIndentation = `,\\n${DEFAULT_INDENT.repeat(level + 1)}`\n    const closingDelimIndentation = DEFAULT_INDENT.repeat(level)\n    const closingIndentation = `${inspectOptions.trailingComma ? \",\" : \"\"\n        }\\n${closingDelimIndentation}`;\n\n    let iContent;\n    if (entries.length === 0 && !inspectOptions.compact) {\n        iContent = `\\n${closingDelimIndentation}`\n    } else if (options.group && entries.length > MIN_GROUP_LENGTH) {\n        const groups = groupEntries(entries, level, value as unknown[])\n        iContent = `${initIndentation}${groups.join(entryIndentation)\n            }${closingIndentation}`\n    } else {\n        iContent = entries.length === 0\n            ? \"\"\n            : ` ${entries.join(\", \")} `\n        if (\n            colors.stripColor(iContent).length > LINE_BREAKING_LENGTH ||\n            !inspectOptions.compact\n        ) {\n            iContent = `${initIndentation}${entries.join(entryIndentation)\n                }${closingIndentation}`\n        }\n    }\n\n    return `${iPrefix}${options.delims[0]}${iContent}${options.delims[1]}`;\n}\n\nfunction inspectArray(\n    value: unknown[],\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const gray = maybeColor(colors.gray, inspectOptions)\n    let lastValidIndex = 0\n    let keys: string[]\n    const options: inspectIterableOptions = {\n        typeName: \"Array\",\n        displayName: \"\",\n        delims: [\"[\", \"]\"],\n        entryHandler: (entry: [number, unknown], inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) => {\n            const [index, val] = entry\n            let i = index\n            lastValidIndex = index\n            if (!value.hasOwnProperty(i)) {\n                let skipTo\n                keys = keys || Object.keys(value)\n                i = value.length\n                if (keys.length === 0) {\n                    // fast path, all items are empty\n                    skipTo = i\n                } else {\n                    // Not all indexes are empty or there's a non-index property\n                    // Find first non-empty array index\n                    while (keys.length) {\n                        const key = keys.shift()!\n                        // check if it's a valid array index\n                        if (key as unknown as number > lastValidIndex && key as unknown as number < 2 ** 32 - 1) {\n                            i = Number(key)\n                            break\n                        }\n                    }\n\n                    skipTo = i - 1;\n                }\n                const emptyItems = i - index;\n                const ending = emptyItems > 1 ? \"s\" : \"\";\n                return {\n                    entry: gray(`<${emptyItems} empty item${ending}>`),\n                    skipTo,\n                };\n            } else {\n                return { entry: inspectValueWithQuotes(val, inspectOptions) }\n            }\n        },\n        group: inspectOptions.compact,\n        sort: false,\n    }\n    return inspectIterable(value, options, inspectOptions)\n}\n\n// Surround a symbol's description in quotes when it is required (e.g the description has non printable characters).\nfunction maybeQuoteSymbol(symbol: symbol) {\n    if (symbol.description === undefined) {\n        return symbol.toString()\n    }\n\n    if (/^[a-zA-Z_][a-zA-Z_.0-9]*$/.test(symbol.description)) {\n        return symbol.toString()\n    }\n\n    return `Symbol(${quoteString(symbol.description)})`\n}\n\nfunction getClassInstanceName(instance: unknown) {\n    if (typeof instance != \"object\") {\n        return \"\"\n    }\n    const constructor = instance?.constructor;\n    if (typeof constructor == \"function\") {\n        return constructor.name ?? \"\"\n    }\n    return \"\"\n}\n\n// Surround a string with quotes when it is required (e.g the string not a valid identifier).\nfunction maybeQuoteString(string: string) {\n    if (/^[a-zA-Z_][a-zA-Z_0-9]*$/.test(string)) {\n        return replaceEscapeSequences(string)\n    }\n\n    return quoteString(string)\n}\n\nfunction propertyIsEnumerable(obj: Record<symbol | string, unknown>, prop: symbol) {\n    if (\n        obj == null ||\n        typeof obj.propertyIsEnumerable !== \"function\"\n    ) {\n        return false;\n    }\n\n    return obj.propertyIsEnumerable(prop)\n}\n\nfunction inspectRawObject(\n    value: Record<symbol | string, any>,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n\n    if (inspectOptions.indentLevel >= inspectOptions.depth) {\n        return [cyan(\"[Object]\"), \"\"]; // wrappers are in cyan\n    }\n\n    let baseString;\n\n    let shouldShowDisplayName = false\n    let displayName = value[\n        Symbol.toStringTag\n    ]\n    if (!displayName) {\n        displayName = getClassInstanceName(value)\n    }\n    if (\n        displayName && displayName !== \"Object\" && displayName !== \"anonymous\"\n    ) {\n        shouldShowDisplayName = true\n    }\n\n    const entries: string[] = []\n    const stringKeys = Object.keys(value)\n    const symbolKeys = Object.getOwnPropertySymbols(value)\n    if (inspectOptions.sorted) {\n        stringKeys.sort()\n        symbolKeys.sort((s1, s2) =>\n            (s1.description ?? \"\").localeCompare(s2.description ?? \"\"),\n        )\n    }\n\n    const red = maybeColor(colors.red, inspectOptions)\n\n    inspectOptions.indentLevel++\n\n    for (const key of stringKeys) {\n        if (inspectOptions.getters) {\n            let propertyValue\n            let error = null\n            try {\n                propertyValue = value[key]\n            } catch (error_: any) {\n                error = error_\n            }\n            const inspectedValue = error == null\n                ? inspectValueWithQuotes(propertyValue, inspectOptions)\n                : red(`[Thrown ${error.name}: ${error.message}]`);\n            entries.push(`${maybeQuoteString(key)}: ${inspectedValue}`)\n        } else {\n            const descriptor = Object.getOwnPropertyDescriptor(value, key)\n            if (descriptor!.get !== undefined && descriptor!.set !== undefined) {\n                entries.push(`${maybeQuoteString(key)}: [Getter/Setter]`)\n            } else if (descriptor!.get !== undefined) {\n                entries.push(`${maybeQuoteString(key)}: [Getter]`)\n            } else {\n                entries.push(`${maybeQuoteString(key)}: ${inspectValueWithQuotes(value[key], inspectOptions)\n                    }`)\n            }\n        }\n    }\n\n    for (const key of symbolKeys) {\n        if (\n            !inspectOptions.showHidden &&\n            !propertyIsEnumerable(value, key)\n        ) {\n            continue\n        }\n\n        if (inspectOptions.getters) {\n            let propertyValue\n            let error\n            try {\n                propertyValue = value[key];\n            } catch (error_: any) {\n                error = error_\n            }\n            const inspectedValue = error == null\n                ? inspectValueWithQuotes(propertyValue, inspectOptions)\n                : red(`Thrown ${error.name}: ${error.message}`)\n            entries.push(`[${maybeQuoteSymbol(key)}]: ${inspectedValue}`)\n        } else {\n            const descriptor = Object.getOwnPropertyDescriptor(value, key)\n            if (descriptor!.get !== undefined && descriptor!.set !== undefined) {\n                entries.push(`[${maybeQuoteSymbol(key)}]: [Getter/Setter]`)\n            } else if (descriptor!.get !== undefined) {\n                entries.push(`[${maybeQuoteSymbol(key)}]: [Getter]`)\n            } else {\n                entries.push(`[${maybeQuoteSymbol(key)}]: ${inspectValueWithQuotes(value[key], inspectOptions)\n                    }`)\n            }\n        }\n    }\n\n    inspectOptions.indentLevel--\n\n    // Making sure color codes are ignored when calculating the total length\n    const totalLength = entries.length + inspectOptions.indentLevel +\n        colors.stripColor(entries.join(\"\")).length\n\n    if (entries.length === 0) {\n        baseString = \"{}\";\n    } else if (totalLength > LINE_BREAKING_LENGTH || !inspectOptions.compact) {\n        const entryIndent = DEFAULT_INDENT.repeat(inspectOptions.indentLevel + 1)\n        const closingIndent = DEFAULT_INDENT.repeat(inspectOptions.indentLevel)\n        baseString = `{\\n${entryIndent}${entries.join(`,\\n${entryIndent}`)\n            }${inspectOptions.trailingComma ? \",\" : \"\"}\\n${closingIndent}}`;\n    } else {\n        baseString = `{ ${entries.join(\", \")} }`;\n    }\n\n    if (shouldShowDisplayName) {\n        baseString = `${displayName} ${baseString}`;\n    }\n\n    let refIndex = \"\";\n    if (circular !== undefined) {\n        const index = circular.get(value)\n        if (index !== undefined) {\n            refIndex = cyan(`<ref *${index}> `);\n        }\n    }\n\n    return [baseString, refIndex];\n}\n\nconst denoCustomInspect = Symbol.for(\"Deno.customInspect\")\n\nfunction inspectFunction(value: Function, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    if (\n        Reflect.has(value, denoCustomInspect) &&\n        typeof (value as Function & { [denoCustomInspect]: typeof denoCustomInspect })[denoCustomInspect] === \"function\"\n    ) {\n        return String((value as Function & { [denoCustomInspect]: Function })[denoCustomInspect](inspect, inspectOptions))\n    }\n    // Might be Function/AsyncFunction/GeneratorFunction/AsyncGeneratorFunction\n    let cstrName = Object.getPrototypeOf(value)?.constructor?.name\n    if (!cstrName) {\n        // If prototype is removed or broken,\n        // use generic 'Function' instead.\n        cstrName = \"Function\"\n    }\n\n    // Our function may have properties, so we want to format those\n    // as if our function was an object\n    // If we didn't find any properties, we will just append an\n    // empty suffix.\n    let suffix = ``\n    let refStr = \"\"\n    if (\n        Object.keys(value).length > 0 ||\n        Object.getOwnPropertySymbols(value).length > 0\n    ) {\n        const [propString, refIndex] = inspectRawObject(\n            value,\n            inspectOptions,\n        );\n        refStr = refIndex\n        // Filter out the empty string for the case we only have\n        // non-enumerable symbols.\n        if (\n            propString.length > 0 &&\n            propString !== \"{}\"\n        ) {\n            suffix = ` ${propString}`\n        }\n    }\n\n    if (value.name && value.name !== \"anonymous\") {\n        // from MDN spec\n        return cyan(`${refStr}[${cstrName}: ${value.name}]`) + suffix\n    }\n    return cyan(`${refStr}[${cstrName}]`) + suffix\n}\n\nconst colorKeywords = new Map([\n    [\"black\", \"#000000\"],\n    [\"silver\", \"#c0c0c0\"],\n    [\"gray\", \"#808080\"],\n    [\"white\", \"#ffffff\"],\n    [\"maroon\", \"#800000\"],\n    [\"red\", \"#ff0000\"],\n    [\"purple\", \"#800080\"],\n    [\"fuchsia\", \"#ff00ff\"],\n    [\"green\", \"#008000\"],\n    [\"lime\", \"#00ff00\"],\n    [\"olive\", \"#808000\"],\n    [\"yellow\", \"#ffff00\"],\n    [\"navy\", \"#000080\"],\n    [\"blue\", \"#0000ff\"],\n    [\"teal\", \"#008080\"],\n    [\"aqua\", \"#00ffff\"],\n    [\"orange\", \"#ffa500\"],\n    [\"aliceblue\", \"#f0f8ff\"],\n    [\"antiquewhite\", \"#faebd7\"],\n    [\"aquamarine\", \"#7fffd4\"],\n    [\"azure\", \"#f0ffff\"],\n    [\"beige\", \"#f5f5dc\"],\n    [\"bisque\", \"#ffe4c4\"],\n    [\"blanchedalmond\", \"#ffebcd\"],\n    [\"blueviolet\", \"#8a2be2\"],\n    [\"brown\", \"#a52a2a\"],\n    [\"burlywood\", \"#deb887\"],\n    [\"cadetblue\", \"#5f9ea0\"],\n    [\"chartreuse\", \"#7fff00\"],\n    [\"chocolate\", \"#d2691e\"],\n    [\"coral\", \"#ff7f50\"],\n    [\"cornflowerblue\", \"#6495ed\"],\n    [\"cornsilk\", \"#fff8dc\"],\n    [\"crimson\", \"#dc143c\"],\n    [\"cyan\", \"#00ffff\"],\n    [\"darkblue\", \"#00008b\"],\n    [\"darkcyan\", \"#008b8b\"],\n    [\"darkgoldenrod\", \"#b8860b\"],\n    [\"darkgray\", \"#a9a9a9\"],\n    [\"darkgreen\", \"#006400\"],\n    [\"darkgrey\", \"#a9a9a9\"],\n    [\"darkkhaki\", \"#bdb76b\"],\n    [\"darkmagenta\", \"#8b008b\"],\n    [\"darkolivegreen\", \"#556b2f\"],\n    [\"darkorange\", \"#ff8c00\"],\n    [\"darkorchid\", \"#9932cc\"],\n    [\"darkred\", \"#8b0000\"],\n    [\"darksalmon\", \"#e9967a\"],\n    [\"darkseagreen\", \"#8fbc8f\"],\n    [\"darkslateblue\", \"#483d8b\"],\n    [\"darkslategray\", \"#2f4f4f\"],\n    [\"darkslategrey\", \"#2f4f4f\"],\n    [\"darkturquoise\", \"#00ced1\"],\n    [\"darkviolet\", \"#9400d3\"],\n    [\"deeppink\", \"#ff1493\"],\n    [\"deepskyblue\", \"#00bfff\"],\n    [\"dimgray\", \"#696969\"],\n    [\"dimgrey\", \"#696969\"],\n    [\"dodgerblue\", \"#1e90ff\"],\n    [\"firebrick\", \"#b22222\"],\n    [\"floralwhite\", \"#fffaf0\"],\n    [\"forestgreen\", \"#228b22\"],\n    [\"gainsboro\", \"#dcdcdc\"],\n    [\"ghostwhite\", \"#f8f8ff\"],\n    [\"gold\", \"#ffd700\"],\n    [\"goldenrod\", \"#daa520\"],\n    [\"greenyellow\", \"#adff2f\"],\n    [\"grey\", \"#808080\"],\n    [\"honeydew\", \"#f0fff0\"],\n    [\"hotpink\", \"#ff69b4\"],\n    [\"indianred\", \"#cd5c5c\"],\n    [\"indigo\", \"#4b0082\"],\n    [\"ivory\", \"#fffff0\"],\n    [\"khaki\", \"#f0e68c\"],\n    [\"lavender\", \"#e6e6fa\"],\n    [\"lavenderblush\", \"#fff0f5\"],\n    [\"lawngreen\", \"#7cfc00\"],\n    [\"lemonchiffon\", \"#fffacd\"],\n    [\"lightblue\", \"#add8e6\"],\n    [\"lightcoral\", \"#f08080\"],\n    [\"lightcyan\", \"#e0ffff\"],\n    [\"lightgoldenrodyellow\", \"#fafad2\"],\n    [\"lightgray\", \"#d3d3d3\"],\n    [\"lightgreen\", \"#90ee90\"],\n    [\"lightgrey\", \"#d3d3d3\"],\n    [\"lightpink\", \"#ffb6c1\"],\n    [\"lightsalmon\", \"#ffa07a\"],\n    [\"lightseagreen\", \"#20b2aa\"],\n    [\"lightskyblue\", \"#87cefa\"],\n    [\"lightslategray\", \"#778899\"],\n    [\"lightslategrey\", \"#778899\"],\n    [\"lightsteelblue\", \"#b0c4de\"],\n    [\"lightyellow\", \"#ffffe0\"],\n    [\"limegreen\", \"#32cd32\"],\n    [\"linen\", \"#faf0e6\"],\n    [\"magenta\", \"#ff00ff\"],\n    [\"mediumaquamarine\", \"#66cdaa\"],\n    [\"mediumblue\", \"#0000cd\"],\n    [\"mediumorchid\", \"#ba55d3\"],\n    [\"mediumpurple\", \"#9370db\"],\n    [\"mediumseagreen\", \"#3cb371\"],\n    [\"mediumslateblue\", \"#7b68ee\"],\n    [\"mediumspringgreen\", \"#00fa9a\"],\n    [\"mediumturquoise\", \"#48d1cc\"],\n    [\"mediumvioletred\", \"#c71585\"],\n    [\"midnightblue\", \"#191970\"],\n    [\"mintcream\", \"#f5fffa\"],\n    [\"mistyrose\", \"#ffe4e1\"],\n    [\"moccasin\", \"#ffe4b5\"],\n    [\"navajowhite\", \"#ffdead\"],\n    [\"oldlace\", \"#fdf5e6\"],\n    [\"olivedrab\", \"#6b8e23\"],\n    [\"orangered\", \"#ff4500\"],\n    [\"orchid\", \"#da70d6\"],\n    [\"palegoldenrod\", \"#eee8aa\"],\n    [\"palegreen\", \"#98fb98\"],\n    [\"paleturquoise\", \"#afeeee\"],\n    [\"palevioletred\", \"#db7093\"],\n    [\"papayawhip\", \"#ffefd5\"],\n    [\"peachpuff\", \"#ffdab9\"],\n    [\"peru\", \"#cd853f\"],\n    [\"pink\", \"#ffc0cb\"],\n    [\"plum\", \"#dda0dd\"],\n    [\"powderblue\", \"#b0e0e6\"],\n    [\"rosybrown\", \"#bc8f8f\"],\n    [\"royalblue\", \"#4169e1\"],\n    [\"saddlebrown\", \"#8b4513\"],\n    [\"salmon\", \"#fa8072\"],\n    [\"sandybrown\", \"#f4a460\"],\n    [\"seagreen\", \"#2e8b57\"],\n    [\"seashell\", \"#fff5ee\"],\n    [\"sienna\", \"#a0522d\"],\n    [\"skyblue\", \"#87ceeb\"],\n    [\"slateblue\", \"#6a5acd\"],\n    [\"slategray\", \"#708090\"],\n    [\"slategrey\", \"#708090\"],\n    [\"snow\", \"#fffafa\"],\n    [\"springgreen\", \"#00ff7f\"],\n    [\"steelblue\", \"#4682b4\"],\n    [\"tan\", \"#d2b48c\"],\n    [\"thistle\", \"#d8bfd8\"],\n    [\"tomato\", \"#ff6347\"],\n    [\"turquoise\", \"#40e0d0\"],\n    [\"violet\", \"#ee82ee\"],\n    [\"wheat\", \"#f5deb3\"],\n    [\"whitesmoke\", \"#f5f5f5\"],\n    [\"yellowgreen\", \"#9acd32\"],\n    [\"rebeccapurple\", \"#663399\"],\n])\n\nfunction parseCssColor(colorString: string): [number, number, number] | null {\n    if (colorKeywords.has(colorString)) {\n        colorString = colorKeywords.get(colorString)!\n    }\n    const hashMatch = colorString.match(/^#([\\dA-Fa-f]{2})([\\dA-Fa-f]{2})([\\dA-Fa-f]{2})([\\dA-Fa-f]{2})?$/)\n    if (hashMatch != null) {\n        return [\n            Number(`0x${hashMatch[1]}`),\n            Number(`0x${hashMatch[2]}`),\n            Number(`0x${hashMatch[3]}`),\n        ]\n    }\n    const smallHashMatch = colorString.match(/^#([\\dA-Fa-f])([\\dA-Fa-f])([\\dA-Fa-f])([\\dA-Fa-f])?$/)\n    if (smallHashMatch != null) {\n        return [\n            Number(`0x${smallHashMatch[1]}0`),\n            Number(`0x${smallHashMatch[2]}0`),\n            Number(`0x${smallHashMatch[3]}0`),\n        ]\n    }\n    const rgbMatch = colorString.match(/^rgba?\\(\\s*([+\\-]?\\d*\\.?\\d+)\\s*,\\s*([+\\-]?\\d*\\.?\\d+)\\s*,\\s*([+\\-]?\\d*\\.?\\d+)\\s*(,\\s*([+\\-]?\\d*\\.?\\d+)\\s*)?\\)$/)\n    if (rgbMatch != null) {\n        return [\n            Math.round(Math.max(0, Math.min(255, Number(rgbMatch[1])))),\n            Math.round(Math.max(0, Math.min(255, Number(rgbMatch[2])))),\n            Math.round(Math.max(0, Math.min(255, Number(rgbMatch[3])))),\n        ]\n    }\n    const hslMatch = colorString.match(/^hsla?\\(\\s*([+\\-]?\\d*\\.?\\d+)\\s*,\\s*([+\\-]?\\d*\\.?\\d+)%\\s*,\\s*([+\\-]?\\d*\\.?\\d+)%\\s*(,\\s*([+\\-]?\\d*\\.?\\d+)\\s*)?\\)$/)\n    if (hslMatch != null) {\n        // https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n        let h = Number(hslMatch[1]) % 360\n        if (h < 0) {\n            h += 360\n        }\n        const s = Math.max(0, Math.min(100, Number(hslMatch[2]))) / 100\n        const l = Math.max(0, Math.min(100, Number(hslMatch[3]))) / 100\n        const c = (1 - Math.abs(2 * l - 1)) * s\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n        const m = l - c / 2\n        let r_\n        let g_\n        let b_\n        if (h < 60) {\n            [r_, g_, b_] = [c, x, 0]\n        } else if (h < 120) {\n            [r_, g_, b_] = [x, c, 0]\n        } else if (h < 180) {\n            [r_, g_, b_] = [0, c, x]\n        } else if (h < 240) {\n            [r_, g_, b_] = [0, x, c]\n        } else if (h < 300) {\n            [r_, g_, b_] = [x, 0, c]\n        } else {\n            [r_, g_, b_] = [c, 0, x]\n        }\n        return [\n            Math.round((r_ + m) * 255),\n            Math.round((g_ + m) * 255),\n            Math.round((b_ + m) * 255),\n        ]\n    }\n    return null\n}\n\ninterface Css {\n    backgroundColor: [number, number, number] | string | null\n    color: [number, number, number] | string | null\n    fontWeight: string | null\n    fontStyle: string | null\n    textDecorationColor: [number, number, number] | null\n    textDecorationLine: string[]\n}\n\nfunction getDefaultCss(): Css {\n    return {\n        backgroundColor: null,\n        color: null,\n        fontWeight: null,\n        fontStyle: null,\n        textDecorationColor: null,\n        textDecorationLine: [],\n    }\n}\n\nfunction parseCss(cssString: string) {\n    const css = getDefaultCss()\n\n    const rawEntries = []\n    let inValue = false\n    let currentKey = null\n    let parenthesesDepth = 0\n    let currentPart = \"\"\n    for (let i = 0; i < cssString.length; i++) {\n        const c = cssString[i];\n        if (c == \"(\") {\n            parenthesesDepth++;\n        } else if (parenthesesDepth > 0) {\n            if (c == \")\") {\n                parenthesesDepth--;\n            }\n        } else if (inValue) {\n            if (c == \";\") {\n                const value = currentPart.trim()\n                if (value != \"\") {\n                    rawEntries.push([currentKey, value])\n                }\n                currentKey = null\n                currentPart = \"\"\n                inValue = false\n                continue;\n            }\n        } else if (c == \":\") {\n            currentKey = currentPart.trim()\n            currentPart = \"\"\n            inValue = true\n            continue\n        }\n        currentPart += c\n    }\n    if (inValue && parenthesesDepth == 0) {\n        const value = currentPart.trim()\n        if (value != \"\") {\n            rawEntries.push([currentKey, value])\n        }\n        currentKey = null\n        currentPart = \"\"\n    }\n\n    for (const [key, value] of rawEntries) {\n        if (key == \"background-color\") {\n            if (value != null) {\n                css.backgroundColor = value;\n            }\n        } else if (key == \"color\") {\n            if (value != null) {\n                css.color = value\n            }\n        } else if (key == \"font-weight\") {\n            if (value == \"bold\") {\n                css.fontWeight = value\n            }\n        } else if (key == \"font-style\") {\n            if (\n                [\"italic\", \"oblique\", \"oblique 14deg\"].includes(value!)\n            ) {\n                css.fontStyle = \"italic\"\n            }\n        } else if (key == \"text-decoration-line\") {\n            css.textDecorationLine = [];\n            for (const lineType of value?.split(/\\s+/g)!) {\n                if (\n                    [\"line-through\", \"overline\", \"underline\"].includes(lineType)\n                ) {\n                    css.textDecorationLine.push(lineType)\n                }\n            }\n        } else if (key == \"text-decoration-color\") {\n            const color = parseCssColor(value!)\n            if (color != null) {\n                css.textDecorationColor = color\n            }\n        } else if (key == \"text-decoration\") {\n            css.textDecorationColor = null\n            css.textDecorationLine = []\n            for (const arg of value?.split(/\\s+/g)!) {\n                const maybeColor = parseCssColor(arg)\n                if (maybeColor != null) {\n                    css.textDecorationColor = maybeColor\n                } else if (\n                    [\"line-through\", \"overline\", \"underline\"].includes(arg)\n                ) {\n                    css.textDecorationLine.push(arg)\n                }\n            }\n        }\n    }\n\n    return css;\n}\n\nfunction colorEquals(color1: string | number[], color2: string | number[]) {\n    return color1?.[0] == color2?.[0] && color1?.[1] == color2?.[1] &&\n        color1?.[2] == color2?.[2];\n}\n\nfunction cssToAnsi(css: Css, prevCss: Css | null = null) {\n    prevCss = prevCss ?? getDefaultCss()\n    let ansi = \"\"\n    if (!colorEquals(css.backgroundColor!, prevCss.backgroundColor!)) {\n        if (css.backgroundColor == null) {\n            ansi += \"\\x1b[49m\";\n        } else if (css.backgroundColor == \"black\") {\n            ansi += `\\x1b[40m`;\n        } else if (css.backgroundColor == \"red\") {\n            ansi += `\\x1b[41m`;\n        } else if (css.backgroundColor == \"green\") {\n            ansi += `\\x1b[42m`;\n        } else if (css.backgroundColor == \"yellow\") {\n            ansi += `\\x1b[43m`;\n        } else if (css.backgroundColor == \"blue\") {\n            ansi += `\\x1b[44m`;\n        } else if (css.backgroundColor == \"magenta\") {\n            ansi += `\\x1b[45m`;\n        } else if (css.backgroundColor == \"cyan\") {\n            ansi += `\\x1b[46m`;\n        } else if (css.backgroundColor == \"white\") {\n            ansi += `\\x1b[47m`;\n        } else {\n            if (Array.isArray(css.backgroundColor)) {\n                const [r, g, b] = css.backgroundColor\n                ansi += `\\x1b[48;2;${r};${g};${b}m`\n            } else {\n                const parsed = parseCssColor(css.backgroundColor)\n                if (parsed !== null) {\n                    const [r, g, b] = parsed\n                    ansi += `\\x1b[48;2;${r};${g};${b}m`\n                } else {\n                    ansi += \"\\x1b[49m\"\n                }\n            }\n        }\n    }\n    if (!colorEquals(css.color!, prevCss.color!)) {\n        if (css.color == null) {\n            ansi += \"\\x1b[39m\";\n        } else if (css.color == \"black\") {\n            ansi += `\\x1b[30m`;\n        } else if (css.color == \"red\") {\n            ansi += `\\x1b[31m`;\n        } else if (css.color == \"green\") {\n            ansi += `\\x1b[32m`;\n        } else if (css.color == \"yellow\") {\n            ansi += `\\x1b[33m`;\n        } else if (css.color == \"blue\") {\n            ansi += `\\x1b[34m`;\n        } else if (css.color == \"magenta\") {\n            ansi += `\\x1b[35m`;\n        } else if (css.color == \"cyan\") {\n            ansi += `\\x1b[36m`;\n        } else if (css.color == \"white\") {\n            ansi += `\\x1b[37m`;\n        } else {\n            if (Array.isArray(css.color)) {\n                const [r, g, b] = css.color\n                ansi += `\\x1b[38;2;${r};${g};${b}m`\n            } else {\n                const parsed = parseCssColor(css.color)\n                if (parsed !== null) {\n                    const [r, g, b] = parsed\n                    ansi += `\\x1b[38;2;${r};${g};${b}m`\n                } else {\n                    ansi += \"\\x1b[39m\"\n                }\n            }\n        }\n    }\n    if (css.fontWeight != prevCss.fontWeight) {\n        if (css.fontWeight == \"bold\") {\n            ansi += `\\x1b[1m`\n        } else {\n            ansi += \"\\x1b[22m\"\n        }\n    }\n    if (css.fontStyle != prevCss.fontStyle) {\n        if (css.fontStyle == \"italic\") {\n            ansi += `\\x1b[3m`\n        } else {\n            ansi += \"\\x1b[23m\"\n        }\n    }\n    if (!colorEquals(css.textDecorationColor!, prevCss.textDecorationColor!)) {\n        if (css.textDecorationColor != null) {\n            const [r, g, b] = css.textDecorationColor\n            ansi += `\\x1b[58;2;${r};${g};${b}m`\n        } else {\n            ansi += \"\\x1b[59m\"\n        }\n    }\n    if (\n        css.textDecorationLine.includes(\"line-through\") !=\n        prevCss.textDecorationLine.includes(\"line-through\")\n    ) {\n        if (css.textDecorationLine.includes(\"line-through\")) {\n            ansi += \"\\x1b[9m\"\n        } else {\n            ansi += \"\\x1b[29m\"\n        }\n    }\n    if (\n        css.textDecorationLine.includes(\"overline\") !=\n        prevCss.textDecorationLine.includes(\"overline\")\n    ) {\n        if (css.textDecorationLine.includes(\"overline\")) {\n            ansi += \"\\x1b[53m\"\n        } else {\n            ansi += \"\\x1b[55m\"\n        }\n    }\n    if (\n        css.textDecorationLine.includes(\"underline\") !=\n        prevCss.textDecorationLine.includes(\"underline\")\n    ) {\n        if (css.textDecorationLine.includes(\"underline\")) {\n            ansi += \"\\x1b[4m\"\n        } else {\n            ansi += \"\\x1b[24m\"\n        }\n    }\n    return ansi\n}\n\nfunction inspectArgs(args: unknown[], inspectOptions = {}) {\n    circular = undefined\n\n    const rInspectOptions = { ...DEFAULT_INSPECT_OPTIONS, ...inspectOptions };\n    const first = args[0]\n    let a = 0\n    let string = \"\"\n\n    if (typeof first == \"string\" && args.length > 1) {\n        a++\n        // Index of the first not-yet-appended character. Use this so we only\n        // have to append to `string` when a substitution occurs / at the end.\n        let appendedChars = 0\n        let usedStyle = false\n        let prevCss = null\n        for (let i = 0; i < first.length - 1; i++) {\n            if (first[i] == \"%\") {\n                const char = first[++i]\n                if (a < args.length) {\n                    let formattedArg = null\n                    if (char == \"s\") {\n                        // Format as a string.\n                        formattedArg = String(args[a++])\n                    } else if ([\"d\", \"i\"].includes(char)) {\n                        // Format as an integer.\n                        const value = args[a++]\n                        if (typeof value == \"bigint\") {\n                            formattedArg = `${value}n`\n                        } else if (typeof value == \"number\") {\n                            formattedArg = `${Number.parseInt(String(value))}`\n                        } else {\n                            formattedArg = \"NaN\"\n                        }\n                    } else if (char == \"f\") {\n                        // Format as a floating point value.\n                        const value = args[a++];\n                        if (typeof value == \"number\") {\n                            formattedArg = `${value}`\n                        } else {\n                            formattedArg = \"NaN\"\n                        }\n                    } else if ([\"O\", \"o\"].includes(char)) {\n                        // Format as an object.\n                        formattedArg = inspectValue(args[a++], rInspectOptions)\n                    } else if (char == \"c\") {\n                        const value = args[a++]\n                        if (rInspectOptions.colors) {\n                            const css = parseCss(value as string)\n                            formattedArg = cssToAnsi(css, prevCss)\n                            if (formattedArg != \"\") {\n                                usedStyle = true\n                                prevCss = css\n                            }\n                        } else {\n                            formattedArg = \"\"\n                        }\n                    }\n\n                    if (formattedArg != null) {\n                        string += first.slice(appendedChars, i - 1) +\n                            formattedArg\n                        appendedChars = i + 1\n                    }\n                }\n                if (char == \"%\") {\n                    string += first.slice(appendedChars, i - 1) + \"%\"\n                    appendedChars = i + 1\n                }\n            }\n        }\n        string += first.slice(appendedChars)\n        if (usedStyle) {\n            string += \"\\x1b[0m\"\n        }\n    }\n\n    for (; a < args.length; a++) {\n        if (a > 0) {\n            string += \" \"\n        }\n        if (typeof args[a] == \"string\") {\n            string += args[a]\n        } else {\n            // Use default maximum depth for null or undefined arguments.\n            string += inspectValue(args[a], rInspectOptions)\n        }\n    }\n\n    if (rInspectOptions.indentLevel > 0) {\n        const groupIndent = DEFAULT_INDENT.repeat(rInspectOptions.indentLevel)\n        string = groupIndent + string.replaceAll(\"\\n\", `\\n${groupIndent}`)\n    }\n\n    return string\n}\n\nfunction inspectError(value: Error, cyan: (s: string) => string) {\n    const causes: any[] = [value]\n\n    let err = value\n    while (err.cause) {\n        if (causes.includes(err.cause)) {\n            causes.push(handleCircular(err.cause, cyan))\n            break\n        } else {\n            causes.push(err.cause)\n            err = err.cause as Error\n        }\n    }\n\n    const refMap = new Map()\n    for (const cause of causes) {\n        if (circular !== undefined) {\n            const index = circular.get(cause)\n            if (index !== undefined) {\n                refMap.set(cause, cyan(`<ref *${index}> `))\n            }\n        }\n    }\n    causes.shift()\n\n    let finalMessage = (refMap.get(value) ?? \"\")\n\n    if (AggregateError.prototype.isPrototypeOf(value)) {\n        const stackLines = value.stack?.split(\"\\n\")\n        while (true) {\n            const line = stackLines?.shift()!\n            if (/\\s+at/.test(line)) {\n                stackLines?.unshift(line)\n                break\n            } else if (typeof line === \"undefined\") {\n                break\n            }\n\n            finalMessage += line\n            finalMessage += \"\\n\"\n        }\n        const aggregateMessage = (value as AggregateError).errors.map((error) =>\n            inspectArgs([error]).replace(/^(?!\\s*$)/gm, \" \".repeat(4))).join(\"\\n\")\n        finalMessage += aggregateMessage\n        finalMessage += \"\\n\"\n        finalMessage += stackLines?.join(\"\\n\")\n    } else {\n        finalMessage += value.stack\n    }\n\n    finalMessage += causes.map((cause) =>\n        \"\\nCaused by \" + (refMap.get(cause) ?? \"\") +\n        (cause?.stack ?? cause)).join(\"\")\n\n    return finalMessage\n}\n\nfunction inspectNumberObject(value: number, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    // Special handling of -0\n    return cyan(\n        `[Number: ${Object.is(value.valueOf(), -0)\n            ? \"-0\"\n            : value.toString()\n        }]`,\n    ) // wrappers are in cyan\n}\n\nfunction inspectBigIntObject(value: bigint, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return cyan(`[BigInt: ${value.toString()}n]`) // wrappers are in cyan\n}\n\nfunction inspectBooleanObject(value: boolean, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return cyan(`[Boolean: ${value.toString()}]`) // wrappers are in cyan\n}\n\nfunction inspectStringObject(value: string, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return cyan(`[String: \"${value.toString()}\"]`) // wrappers are in cyan\n}\n\nfunction inspectSymbolObject(value: symbol, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return cyan(`[Symbol: ${maybeQuoteSymbol(value.valueOf())}]`) // wrappers are in cyan\n}\n\n// TODO\nfunction inspectPromise(\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return `Promise { ${cyan(\"[items unknown]\")} }`\n}\n\nfunction inspectRegExp(value: RegExp, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const red = maybeColor(colors.red, inspectOptions)\n    return red(value.toString()) // RegExps are red\n}\n\nfunction inspectDate(value: Date, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    // without quotes, ISO format, in magenta like before\n    const magenta = maybeColor(colors.magenta, inspectOptions)\n    return magenta(\n        isInvalidDate(value) ? \"Invalid Date\" : value.toISOString(),\n    )\n}\n\nfunction inspectSet(\n    value: Set<unknown>,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const options = {\n        typeName: \"Set\",\n        displayName: \"Set\",\n        delims: [\"{\", \"}\"],\n        entryHandler: (entry: [unknown, unknown], inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) => {\n            const val = entry[1]\n            inspectOptions.indentLevel++\n            const inspectedValue = inspectValueWithQuotes(val, inspectOptions)\n            inspectOptions.indentLevel--\n            return inspectedValue\n        },\n        group: false,\n        sort: inspectOptions.sorted,\n    };\n    return inspectIterable(value, options, inspectOptions)\n}\n\nfunction inspectMap(\n    value: Map<unknown, unknown>,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const options = {\n        typeName: \"Map\",\n        displayName: \"Map\",\n        delims: [\"{\", \"}\"],\n        entryHandler: (entry: [unknown, unknown], inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) => {\n            const [key, val] = entry;\n            inspectOptions.indentLevel++\n            const inspectedValue = `${inspectValueWithQuotes(key, inspectOptions)\n                } => ${inspectValueWithQuotes(val, inspectOptions)}`;\n            inspectOptions.indentLevel--\n            return inspectedValue;\n        },\n        group: false,\n        sort: inspectOptions.sorted,\n    }\n    return inspectIterable(\n        value,\n        options,\n        inspectOptions,\n    )\n}\n\nfunction inspectWeakSet(inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return `WeakSet { ${cyan(\"[items unknown]\")} }` // as seen in Node, with cyan color\n}\n\nfunction inspectWeakMap(inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) {\n    const cyan = maybeColor(colors.cyan, inspectOptions)\n    return `WeakMap { ${cyan(\"[items unknown]\")} }` // as seen in Node, with cyan color\n}\n\nfunction inspectTypedArray(\n    typedArrayName: string,\n    value: TypedArray,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n) {\n    const valueLength = value.length;\n    const options = {\n        typeName: typedArrayName,\n        displayName: `${typedArrayName}(${valueLength})`,\n        delims: [\"[\", \"]\"],\n        entryHandler: (entry: [unknown, unknown], inspectOptions: typeof DEFAULT_INSPECT_OPTIONS) => {\n            const val = entry[1]\n            inspectOptions.indentLevel++\n            const inspectedValue = inspectValueWithQuotes(val, inspectOptions)\n            inspectOptions.indentLevel--\n            return inspectedValue\n        },\n        group: inspectOptions.compact,\n        sort: false,\n    }\n    return inspectIterable(value, options, inspectOptions)\n}\n\nfunction inspectObject(value: Record<any, any>, inspectOptions: typeof DEFAULT_INSPECT_OPTIONS, proxyDetails?: any[]) {\n    if (\n        Reflect.has(value, denoCustomInspect) &&\n        typeof (value as typeof value & { [denoCustomInspect]: typeof denoCustomInspect })[denoCustomInspect] === \"function\"\n    ) {\n        return String((value as typeof value & { [denoCustomInspect]: Function })[denoCustomInspect](inspect, inspectOptions))\n    }\n    // This non-unique symbol is used to support op_crates, ie.\n    // in extensions/web we don't want to depend on public\n    // Symbol.for(\"Deno.customInspect\") symbol defined in the public API.\n    // Internal only, shouldn't be used by users.\n    const denoPrivateCustomInspect = Symbol.for(\"Deno.privateCustomInspect\");\n    if (\n        Reflect.has(value, denoPrivateCustomInspect) &&\n        typeof (value as typeof value & { [denoPrivateCustomInspect]: typeof denoPrivateCustomInspect })[denoPrivateCustomInspect] === \"function\"\n    ) {\n        // TODO(nayeemrmn): `inspect` is passed as an argument because custom\n        // inspect implementations in `extensions` need it, but may not have access\n        // to the `Deno` namespace in web workers. Remove when the `Deno`\n        // namespace is always enabled.\n        return String(\n            (value as typeof value & { [denoPrivateCustomInspect]: Function })[denoPrivateCustomInspect](inspect, inspectOptions),\n        )\n    }\n    if (Error.prototype.isPrototypeOf(value)) {\n        return inspectError(value as Error, maybeColor(colors.cyan, inspectOptions))\n    } else if (Array.isArray(value)) {\n        return inspectArray(value, inspectOptions)\n    } else if (Number.prototype.isPrototypeOf(value)) {\n        return inspectNumberObject(value as unknown as number, inspectOptions)\n    } else if (BigInt.prototype.isPrototypeOf(value)) {\n        return inspectBigIntObject(value as unknown as bigint, inspectOptions)\n    } else if (Boolean.prototype.isPrototypeOf(value)) {\n        return inspectBooleanObject(value as unknown as boolean, inspectOptions)\n    } else if (String.prototype.isPrototypeOf(value)) {\n        return inspectStringObject(value as unknown as string, inspectOptions)\n    } else if (Symbol.prototype.isPrototypeOf(value)) {\n        return inspectSymbolObject(value as unknown as symbol, inspectOptions)\n    } else if (Promise.prototype.isPrototypeOf(value)) {\n        return inspectPromise(inspectOptions)\n    } else if (RegExp.prototype.isPrototypeOf(value)) {\n        return inspectRegExp(value as RegExp, inspectOptions)\n    } else if (Date.prototype.isPrototypeOf(value)) {\n        return inspectDate(\n            proxyDetails ? proxyDetails[0] : value,\n            inspectOptions,\n        )\n    } else if (Set.prototype.isPrototypeOf(value)) {\n        return inspectSet(\n            proxyDetails ? proxyDetails[0] : value,\n            inspectOptions,\n        )\n    } else if (Map.prototype.isPrototypeOf(value)) {\n        return inspectMap(\n            proxyDetails ? proxyDetails[0] : value,\n            inspectOptions,\n        )\n    } else if (WeakSet.prototype.isPrototypeOf(value)) {\n        return inspectWeakSet(inspectOptions)\n    } else if (WeakMap.prototype.isPrototypeOf(value)) {\n        return inspectWeakMap(inspectOptions)\n    } else if (isTypedArray(value)) {\n        return inspectTypedArray(\n            Object.getPrototypeOf(value).constructor.name,\n            value,\n            inspectOptions,\n        );\n    } else {\n        // Otherwise, default object formatting\n        let [insp, refIndex] = inspectRawObject(value, inspectOptions);\n        insp = refIndex + insp;\n        return insp;\n    }\n}\n\nfunction _inspectValue(\n    value: unknown,\n    inspectOptions: typeof DEFAULT_INSPECT_OPTIONS,\n): string {\n    const green = maybeColor(colors.green, inspectOptions);\n    const yellow = maybeColor(colors.yellow, inspectOptions);\n    const gray = maybeColor(colors.gray, inspectOptions);\n    const cyan = maybeColor(colors.cyan, inspectOptions);\n    const bold = maybeColor(colors.bold, inspectOptions);\n    const red = maybeColor(colors.red, inspectOptions);\n\n    switch (typeof value) {\n        case \"string\":\n            return green(quoteString(value))\n        case \"number\": // Numbers are yellow\n            // Special handling of -0\n            return yellow(Object.is(value, -0) ? \"-0\" : `${value}`)\n        case \"boolean\": // booleans are yellow\n            return yellow(String(value))\n        case \"undefined\": // undefined is gray\n            return gray(String(value))\n        case \"symbol\": // Symbols are green\n            return green(maybeQuoteSymbol(value))\n        case \"bigint\": // Bigints are yellow\n            return yellow(`${value}n`)\n        case \"function\": // Function string is cyan\n            if (ctxHas(value)) {\n                // Circular string is cyan\n                return handleCircular(value, cyan)\n            }\n\n            return inspectFunction(value, inspectOptions)\n        case \"object\": // null is bold\n            if (value === null) {\n                return bold(\"null\");\n            }\n\n            if (ctxHas(value)) {\n                return handleCircular(value, cyan);\n            }\n\n            return inspectObject(\n                value,\n                inspectOptions\n            );\n        default:\n            // Not implemented is red\n            return red(\"[Not Implemented]\");\n    }\n}"],
  "mappings": "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",
  "names": ["code", "cyan", "green", "gray", "inspectOptions", "red", "maybeColor", "magenta", "yellow", "bold"]
}
